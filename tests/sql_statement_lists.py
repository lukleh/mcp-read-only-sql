"""Enumerations of SQL statements used to verify read-only enforcement."""

# PostgreSQL categories -----------------------------------------------------

POSTGRESQL_DML_STATEMENTS = [
    "INSERT INTO employees (id) VALUES (1)",
    "INSERT INTO employees (id) VALUES (1) RETURNING id",
    "INSERT INTO employees (id) VALUES (1) ON CONFLICT (id) DO NOTHING",
    "INSERT INTO employees SELECT id FROM staging_employees",
    "MERGE INTO employees AS e USING staging_employees s ON e.id = s.id WHEN MATCHED THEN UPDATE SET name = s.name",
    "UPDATE employees SET name = 'updated' WHERE id = 1",
    "DELETE FROM employees WHERE id = 1",
    "TRUNCATE TABLE employees",
    "SELECT INTO employees_backup SELECT * FROM employees",
    "COPY employees FROM '/tmp/employees.csv'",
    "COPY employees FROM STDIN",
    "COPY employees FROM PROGRAM 'cat /tmp/employees.csv'",
    "COPY employees TO '/tmp/employees.csv'",
]

POSTGRESQL_TRANSACTION_STATEMENTS = [
    "BEGIN",
    "START TRANSACTION",
    "SET TRANSACTION READ WRITE",
    "SET SESSION CHARACTERISTICS AS TRANSACTION READ WRITE",
    "COMMIT",
    "END",
    "ROLLBACK",
    "ABORT",
    "SAVEPOINT s1",
    "RELEASE SAVEPOINT s1",
    "ROLLBACK TO SAVEPOINT s1",
    "PREPARE TRANSACTION 'gtx1'",
    "COMMIT PREPARED 'gtx1'",
    "ROLLBACK PREPARED 'gtx1'",
]

POSTGRESQL_LOCK_STATEMENTS = [
    "LOCK TABLE employees IN EXCLUSIVE MODE",
]

POSTGRESQL_DDL_CREATE_STATEMENTS = [
    "CREATE TABLE new_table (id INT)",
    "CREATE TABLE new_table2 AS SELECT * FROM employees",
    "CREATE TEMP TABLE temp_table (id INT)",
    "CREATE UNLOGGED TABLE cache_table (id INT)",
    "CREATE MATERIALIZED VIEW mv AS SELECT 1",
    "CREATE VIEW v AS SELECT 1",
    "CREATE SEQUENCE seq",
    "CREATE TYPE mood AS ENUM ('happy')",
    "CREATE DOMAIN posint AS INT CHECK (VALUE > 0)",
    "CREATE EXTENSION IF NOT EXISTS hstore",
    "CREATE SCHEMA analytics",
    "CREATE TABLESPACE fastspace LOCATION '/tmp/pg_ts'",
    "CREATE INDEX idx ON employees(id)",
    "CREATE UNIQUE INDEX idx_unique ON employees(id)",
    "CREATE INDEX CONCURRENTLY idx_conc ON employees(id)",
    "CREATE POLICY employee_read ON employees FOR SELECT USING (true)",
    "CREATE RULE employee_insert AS ON INSERT TO employees DO INSTEAD NOTHING",
    "CREATE TRIGGER trig AFTER INSERT ON employees FOR EACH ROW EXECUTE FUNCTION log_insert()",
    "CREATE FUNCTION myfunc() RETURNS void LANGUAGE plpgsql AS $$ BEGIN NULL; END $$",
    "CREATE PROCEDURE myproc() LANGUAGE plpgsql AS $$ BEGIN NULL; END $$",
    "CREATE AGGREGATE myagg (int) ( SFUNC = int4pl, STYPE = int4 )",
    "CREATE OPERATOR === (PROCEDURE = int4eq, LEFTARG = int, RIGHTARG = int)",
    "CREATE OPERATOR CLASS int4_ops FOR TYPE int USING btree AS STORAGE int4",
    "CREATE OPERATOR FAMILY int4_family USING btree",
    "CREATE TRANSFORM FOR int LANGUAGE plpythonu FROM SQL WITH FUNCTION int4recv",
    "CREATE CAST (int AS text) WITH FUNCTION int4out(int)",
    "CREATE COLLATION german (LC_COLLATE = 'de_DE', LC_CTYPE = 'de_DE')",
    "CREATE CONVERSION myconv FOR 'LATIN1' TO 'UTF8' FROM iso_8859_1_to_utf8",
    "CREATE TEXT SEARCH CONFIGURATION english ( COPY = pg_catalog.english )",
    "CREATE TEXT SEARCH PARSER myparser ( START = prsd_start, GETTOKEN = prsd_nexttoken, END = prsd_end, LEXTYPES = prsd_lextype, HEADLINE = prsd_headline )",
    "CREATE TEXT SEARCH DICTIONARY mydict ( TEMPLATE = simple )",
    "CREATE TEXT SEARCH TEMPLATE mytemplate ( INIT = dsimple_init, LEXIZE = dsimple_lexize )",
    "CREATE LANGUAGE plpythonu",
    "CREATE ROLE readonly",
    "CREATE USER readonly_user",
    "CREATE GROUP readonly_group",
    "CREATE PUBLICATION pub FOR TABLE employees",
    "CREATE SUBSCRIPTION sub CONNECTION 'host=localhost dbname=test' PUBLICATION pub",
    "CREATE SERVER foreign_server FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'localhost')",
    "CREATE USER MAPPING FOR CURRENT_USER SERVER foreign_server OPTIONS (user 'bob')",
    "CREATE FOREIGN DATA WRAPPER my_fdw",
    "CREATE FOREIGN TABLE foreign_table (id int) SERVER foreign_server",
    "CREATE STATISTICS stat ON id FROM employees",
    "CREATE EVENT TRIGGER et ON ddl_command_start EXECUTE FUNCTION log_ddl_start()",
    "CREATE ACCESS METHOD my_am TYPE INDEX HANDLER handler_fn",
    "CREATE DATABASE testdb2",
    "CREATE ROUTINE rot() RETURNS void LANGUAGE SQL AS $$ SELECT 1 $$",
]

POSTGRESQL_DDL_ALTER_STATEMENTS = [
    "ALTER TABLE employees ADD COLUMN active BOOLEAN",
    "ALTER TABLE ALL IN TABLESPACE oldspace SET TABLESPACE newspace",
    "ALTER TABLESPACE fastspace RENAME TO slowspace",
    "ALTER DATABASE testdb SET search_path TO public",
    "ALTER INDEX idx RENAME TO idx_new",
    "ALTER MATERIALIZED VIEW mv REFRESH CONCURRENTLY",
    "ALTER VIEW v RENAME TO v_new",
    "ALTER SEQUENCE seq OWNED BY employees.id",
    "ALTER TYPE mood ADD VALUE 'meh'",
    "ALTER DOMAIN posint ADD CONSTRAINT positive CHECK (VALUE > 0)",
    "ALTER FUNCTION myfunc() OWNER TO postgres",
    "ALTER PROCEDURE myproc() OWNER TO postgres",
    "ALTER ROUTINE rot() OWNER TO postgres",
    "ALTER RULE employee_insert ON employees RENAME TO employee_insert_new",
    "ALTER TRIGGER trig ON employees RENAME TO trig_new",
    "ALTER POLICY employee_read ON employees RENAME TO employee_read_new",
    "ALTER TABLE employees RENAME TO employees_renamed",
    "ALTER TABLE employees SET SCHEMA archive",
    "ALTER STATISTICS stat RENAME TO stat_new",
    "ALTER TEXT SEARCH CONFIGURATION english ADD MAPPING FOR ascii WITH simple",
    "ALTER TEXT SEARCH PARSER myparser RENAME TO myparser_new",
    "ALTER TEXT SEARCH DICTIONARY mydict RENAME TO mydict_new",
    "ALTER TEXT SEARCH TEMPLATE mytemplate RENAME TO mytemplate_new",
    "ALTER LANGUAGE plpythonu OWNER TO postgres",
    "ALTER AGGREGATE myagg(int) OWNER TO postgres",
    "ALTER COLLATION german OWNER TO postgres",
    "ALTER CONVERSION myconv OWNER TO postgres",
    "ALTER EVENT TRIGGER et ENABLE",
    "ALTER EXTENSION hstore UPDATE",
    "ALTER FOREIGN DATA WRAPPER my_fdw OPTIONS (SET fdw_startup_cost '100')",
    "ALTER FOREIGN TABLE foreign_table OPTIONS (SET fillfactor '70')",
    "ALTER LARGE OBJECT 123 OWNER TO postgres",
    "ALTER SERVER foreign_server VERSION '1.0'",
    "ALTER USER MAPPING FOR CURRENT_USER SERVER foreign_server OPTIONS (SET user 'alice')",
    "ALTER ROLE readonly NOLOGIN",
    "ALTER USER readonly_user PASSWORD 'secret'",
    "ALTER GROUP readonly_group ADD USER readonly_user",
    "ALTER SUBSCRIPTION sub DISABLE",
    "ALTER PUBLICATION pub ADD TABLE employees",
    "ALTER DEFAULT PRIVILEGES FOR USER readonly_user IN SCHEMA public GRANT SELECT ON TABLES TO readonly",
    "ALTER SYSTEM SET work_mem = '64MB'",
]

POSTGRESQL_DDL_DROP_STATEMENTS = [
    "DROP TABLE employees",
    "DROP TABLE employees CASCADE",
    "DROP SCHEMA analytics",
    "DROP DATABASE testdb2",
    "DROP VIEW v",
    "DROP MATERIALIZED VIEW mv",
    "DROP INDEX idx",
    "DROP SEQUENCE seq",
    "DROP TYPE mood",
    "DROP DOMAIN posint",
    "DROP TRIGGER trig ON employees",
    "DROP RULE employee_insert ON employees",
    "DROP POLICY employee_read ON employees",
    "DROP FUNCTION myfunc()",
    "DROP PROCEDURE myproc()",
    "DROP ROUTINE rot()",
    "DROP AGGREGATE myagg(int)",
    "DROP OPERATOR === (int, int)",
    "DROP OPERATOR CLASS int4_ops USING btree",
    "DROP OPERATOR FAMILY int4_family USING btree",
    "DROP CAST (int AS text)",
    "DROP COLLATION german",
    "DROP CONVERSION myconv",
    "DROP EXTENSION hstore",
    "DROP EVENT TRIGGER et",
    "DROP TEXT SEARCH CONFIGURATION english",
    "DROP TEXT SEARCH DICTIONARY mydict",
    "DROP TEXT SEARCH PARSER myparser",
    "DROP TEXT SEARCH TEMPLATE mytemplate",
    "DROP TRANSFORM FOR int LANGUAGE plpythonu",
    "DROP TABLESPACE fastspace",
    "DROP SERVER foreign_server",
    "DROP USER MAPPING FOR CURRENT_USER SERVER foreign_server",
    "DROP FOREIGN DATA WRAPPER my_fdw",
    "DROP FOREIGN TABLE foreign_table",
    "DROP STATISTICS stat",
    "DROP ACCESS METHOD my_am",
    "DROP PUBLICATION pub",
    "DROP SUBSCRIPTION sub",
    "DROP ROLE readonly",
    "DROP USER readonly_user",
    "DROP GROUP readonly_group",
    "DROP OWNED BY readonly",
]

POSTGRESQL_MAINTENANCE_STATEMENTS = [
    "ANALYZE employees",
    "VACUUM employees",
    "VACUUM FULL employees",
    "CLUSTER employees",
    "REINDEX TABLE employees",
    "REFRESH MATERIALIZED VIEW mv",
    "REFRESH MATERIALIZED VIEW CONCURRENTLY mv",
    "CHECKPOINT",
    "DISCARD ALL",
    "LOAD 'auto_explain'",
    "COMMENT ON TABLE employees IS 'note'",
    "SECURITY LABEL FOR selinux ON TABLE employees IS 's0'",
    "GRANT SELECT ON employees TO readonly",
    "REVOKE SELECT ON employees FROM readonly",
    "GRANT SELECT ON TABLE employees TO readonly WITH GRANT OPTION",
    "REASSIGN OWNED BY readonly TO postgres",
    "IMPORT FOREIGN SCHEMA public FROM SERVER foreign_server INTO public",
    "NOTIFY channel, 'payload'",
]

POSTGRESQL_PROCEDURAL_STATEMENTS = [
    "DO $$ BEGIN INSERT INTO employees(id) VALUES (1); END $$;",
    "CALL myproc()",
    "EXECUTE 'INSERT INTO employees(id) VALUES (1)'",
]

# Statements used against live PostgreSQL instances running in Docker tests.
POSTGRESQL_INTEGRATION_BLOCKED_STATEMENTS = [
    "INSERT INTO users (username, email) VALUES ('blocked_insert', 'blocked@example.com')",
    "UPDATE users SET email = 'blocked_update@example.com' WHERE id = 1",
    "DELETE FROM users WHERE id = 1",
    "TRUNCATE TABLE users",
    "CREATE TABLE blocked_table (id INT)",
    "ALTER TABLE users ADD COLUMN blocked_column BOOLEAN",
    "DROP TABLE users",
]

POSTGRESQL_ALLOWED_LITERAL_QUERIES = [
    "SELECT 'INSERT INTO users VALUES (...)' AS sample_text",
]

# ClickHouse categories -----------------------------------------------------

CLICKHOUSE_DML_STATEMENTS = [
    "INSERT INTO events VALUES (now(), 'test', 1)",
    "INSERT INTO events SELECT * FROM staging_events",
    "INSERT INTO events FORMAT JSONEachRow {\"id\":1}",
    "OPTIMIZE TABLE events FINAL",
    "ALTER TABLE events UPDATE name = 'x' WHERE id = 1",
    "ALTER TABLE events DELETE WHERE id = 1",
    "ALTER TABLE events MATERIALIZE COLUMN name",
    "ALTER TABLE events MATERIALIZE STATISTICS idx_name",
    "ALTER TABLE events MATERIALIZE INDEX idx_name",
    "ALTER TABLE events CLEAR COLUMN name",
    "ALTER TABLE events CLEAR INDEX idx_name",
    "ALTER TABLE events CLEAR PROJECTION proj",
    "ALTER TABLE events FREEZE PARTITION '2024-01-01'",
    "ALTER TABLE events UNFREEZE PARTITION '2024-01-01'",
    "ALTER TABLE events MOVE PART 'all_0_0_0' TO DISK 'disk1'",
    "ALTER TABLE events MOVE PARTITION 1 TO TABLE archive",
    "ALTER TABLE events ATTACH PART 'all_1_1_0'",
    "ALTER TABLE events DETACH PARTITION 1",
    "ALTER TABLE events FETCH PARTITION 1 FROM 'replica'",
    "ALTER TABLE events REPLACE PARTITION 1 FROM archive",
    "ALTER TABLE events DROP PART 'all_0_0_0'",
    "ALTER TABLE events DROP PARTITION 1",
    "ALTER TABLE events ATTACH PARTITION 1",
    "ALTER TABLE events MATERIALIZE TTL",
    "ALTER TABLE events MODIFY TTL timestamp + INTERVAL 1 DAY",
    "ALTER TABLE events RENAME COLUMN name TO name_new",
    "ALTER TABLE events ADD COLUMN new_col Int32",
    "ALTER TABLE events DROP COLUMN old_col",
    "ALTER TABLE events MODIFY COLUMN name String",
    "ALTER TABLE events COMMENT COLUMN name 'desc'",
    "ALTER TABLE events RESET SETTINGS index_granularity",
    "ALTER TABLE events REMOVE TTL",
    "ALTER TABLE events MATERIALIZE ORDER BY",
    "ALTER TABLE events CONVERT DICTIONARY 'dict' TO 'dict2'",  # mutation-style
]

CLICKHOUSE_DDL_STATEMENTS = [
    "CREATE DATABASE analytics",
    "ATTACH DATABASE analytics FROM '/var/lib/clickhouse/data/analytics'",
    "DETACH DATABASE analytics",
    "DROP DATABASE analytics",
    "ALTER DATABASE analytics COMMENT 'archive'",
    "RENAME DATABASE analytics TO analytics_new",
    "CREATE TABLE events (id UInt32) ENGINE = MergeTree ORDER BY id",
    "CREATE TABLE events_copy AS events",
    "CREATE TABLE events_http ENGINE = MergeTree ORDER BY id TTL created + INTERVAL 1 DAY",
    "CREATE TABLE events_select AS SELECT * FROM events",
    "CREATE TABLE events_like LIKE events",
    "CREATE TABLE events_cluster ON CLUSTER default_cluster AS events",
    "RENAME TABLE events TO events_old",
    "DROP TABLE events_old",
    "TRUNCATE TABLE events",
    "DETACH TABLE events_archive",
    "ATTACH TABLE events_archive FROM '/var/lib/clickhouse/data/events_archive'",
    "EXCHANGE TABLES events AND events_archive",
    "CREATE VIEW events_view AS SELECT * FROM events",
    "CREATE MATERIALIZED VIEW events_mv TO events AS SELECT * FROM events",
    "CREATE LIVE VIEW events_live AS SELECT * FROM events",
    "DROP VIEW events_view",
    "DROP MATERIALIZED VIEW events_mv",
    "DROP LIVE VIEW events_live",
    "CREATE DICTIONARY dict (id UInt32, name String) PRIMARY KEY id SOURCE(FILE(path '/tmp/file.csv')) LAYOUT(FLAT) LIFETIME(0)",
    "ALTER DICTIONARY dict MODIFY LIFETIME 10",
    "DROP DICTIONARY dict",
    "RENAME DICTIONARY dict TO dict_new",
    "CREATE FUNCTION custom(x) AS x + 1",
    "DROP FUNCTION custom",
    "CREATE ROW POLICY row_filter ON events FOR SELECT USING id > 0",
    "ALTER ROW POLICY row_filter ON events TO FILTER id >= 0",
    "DROP ROW POLICY row_filter ON events",
    "CREATE ROLE readonly",
    "ALTER ROLE readonly NOT IDENTIFIED",
    "DROP ROLE readonly",
    "GRANT SELECT ON events TO readonly",
    "REVOKE SELECT ON events FROM readonly",
    "SET ROLE readonly",
    "SET DEFAULT ROLE readonly TO default",
    "CREATE USER app_user IDENTIFIED WITH plaintext_password BY 'secret'",
    "ALTER USER app_user IDENTIFIED WITH plaintext_password BY 'newsecret'",
    "DROP USER app_user",
    "CREATE QUOTA quota1 FOR INTERVAL 1 HOUR MAX QUERIES 100 TO readonly",
    "ALTER QUOTA quota1 FOR INTERVAL 1 HOUR MAX QUERIES 200",
    "DROP QUOTA quota1",
    "CREATE SETTINGS PROFILE profile1 SETTINGS max_threads = 4 TO readonly",
    "ALTER SETTINGS PROFILE profile1 SETTINGS SET max_threads = 8",
    "DROP SETTINGS PROFILE profile1",
    "CREATE RESOURCE GROUP group1 TYPE PIPELINE PRIORITY 1",
    "ALTER RESOURCE GROUP group1 TYPE PIPELINE PRIORITY 2",
    "DROP RESOURCE GROUP group1",
    "CREATE NAMED COLLECTION collection1 AS 'value' = '1'",
    "ALTER NAMED COLLECTION collection1 SET 'value' = '2'",
    "DROP NAMED COLLECTION collection1",
    "CREATE LOG log_table",
    "DROP LOG log_table",
]

CLICKHOUSE_SYSTEM_STATEMENTS = [
    "SYSTEM RELOAD CONFIG",
    "SYSTEM DROP QUERY CACHE",
    "SYSTEM DROP DNS CACHE",
    "SYSTEM RELOAD DICTIONARIES",
    "SYSTEM RELOAD MODELS",
    "SYSTEM RELOAD SIZES",
    "SYSTEM START MERGES events",
    "SYSTEM STOP MERGES events",
    "SYSTEM START TTL MERGES events",
    "SYSTEM STOP TTL MERGES events",
    "SYSTEM DROP REPLICA 'default:events'",
    "SYSTEM SYNC REPLICA events",
    "SYSTEM FLUSH LOGS",
    "SYSTEM FLUSH DISTRIBUTED events",
    "SYSTEM START DISTRIBUTED SENDS events",
    "SYSTEM STOP DISTRIBUTED SENDS events",
    "SYSTEM START FETCHES events",
    "SYSTEM STOP FETCHES events",
    "SYSTEM START REPLICATION QUEUES events",
    "SYSTEM STOP REPLICATION QUEUES events",
    "SYSTEM UNFREEZE DEFAULT",
    "SYSTEM DELETE OLD TEMPORARY DIRECTORIES",
    "SYSTEM SHUTDOWN",
    "SYSTEM KILL",
    "SYSTEM SUSPEND",
    "SYSTEM RESUME",
    "SYSTEM DROP FILESYSTEM CACHE",
    "SYSTEM DROP MARK CACHE",
    "SYSTEM DROP UNCOMPRESSED CACHE",
    "SYSTEM DROP COMPILED EXPRESSION CACHE",
    "SYSTEM DROP MMSCACHE",
    "SYSTEM DROP MUTATION 12345",
]

CLICKHOUSE_KILL_STATEMENTS = [
    "KILL QUERY WHERE query_id = 'abc'",
    "KILL MUTATION WHERE mutation_id = 'mut1'",
]

# Statements exercised against live ClickHouse instances in Docker tests.
CLICKHOUSE_INTEGRATION_BLOCKED_STATEMENTS = [
    "INSERT INTO events VALUES (now(), 'blocked', 1)",
    "ALTER TABLE events UPDATE event_type = 'blocked' WHERE 1",
    "ALTER TABLE events DELETE WHERE 1",
    "TRUNCATE TABLE events",
    "CREATE TABLE blocked_events (id UInt32) ENGINE = MergeTree ORDER BY id",
    "DROP TABLE events",
]

CLICKHOUSE_ALLOWED_LITERAL_QUERIES = [
    "SELECT 'INSERT INTO events VALUES (...)' AS sample_text",
]
